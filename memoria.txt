
*********************************************
****** 1. Cálculo de años bisiestos *********
*********************************************

1. El Software Under Test (SUT)

2. Parámetros:
	[int año]

3. Caracterización: 
	C1: Año válido(no negativo) | Año no válido(negativo)
	C2: Divisible entre 4 | No múltiplo 4
	C3: Divisible entre 100 | No divisible entre 100
	C4: Divisible entre 400 | No múltiplo 400

4. Requisitos:
	Vamos a utilizar el criterio ACoC (All Combinations Coverage) y lo vamos a comparar con el BCC (Base Choice Coverage).
	- ACoC:
		Tenemos un total de 16 posibles combinaciones de pruebas (ya que tenemos cuatro diferentes tests que pueden tener dos valores posibles cada uno).

		TTTT - 2000
		TTTF - 2200
		TTFT - No existe
		TTFF - 1904
		TFTT - No existe
		TFTF - 700
		TFFT - No existe
		TFFF - 7
		FTTT - -2000
		FTTF - -2200
		FTFT - No existe
		FTFF - -8
		FFTT - No existe
		FFTF - -700
		FFFT - No existe
		FFFF - -7

	- BCC:
		Cogemos de caso base el happy path de que se cumple que es un año divisible entre cuatro, entre 100 y entre 400 y es un año positivo.

		TTTT - 2000
		FTTT - -2000
		TFTT - No existe ---> Probamos mejor con TTFF - 1904
		TTFT - No existe ---> TFTF - 700
		TTTF - 2200
	

5.

6.


****************************************************
*** 2. Conversión de números romanos a base diez ***
****************************************************

1.

2. Parámetros:
	[String s]

3. Caracterización:
	Tiene signos validos.
	Tres o más repeticiones seguidas | No
	Contiene I | No contiene I
	Contiene V | No contiene V
	Contiene X | No contiene X
	Contiene L | No contiene L
	Contiene C | No contiene C
	Contiene D | No contiene D
	Contiene M | No contiene M

4. Requisitos:
	Vamos a utilizar el criterio ACoC (All Combinations Coverage) y lo vamos a comparar con el BCC (Base Choice Coverage).
	- ACoC:
		Tenemos un total de 16 posibles combinaciones de pruebas (ya que tenemos cuatro diferentes tests que pueden tener dos valores posibles cada uno).


	- BCC:
		Cogemos de caso base el happy path de que se cumple que es un año divisible entre cuatro, entre 100 y entre 400 y es un año positivo.



************************
*** 3. Embotelladora ***
************************

Si el resto es mayor al nº botellas pequeñas (es decir, no hay botellas suficientes) return -1.

1.

2. Parámetros:
	[int pequenas, int grandes, int total]

3. Caracterización:
	C1: pequeñas nulo
	C2: grandes nulo
	C3: total nulo
	C4: pequeñas positivo
	C5: grandes positivo
	C6: total positivo
	C7: total > grandes x 5
	C8: total = grandes x 5
	C11: pequeñas > total
	C12: pequeñas = total

	Dividimos en nulo (0) y positivos porque nulo es caso frontera.


4. Requisitos:
	Vamos a utilizar el criterio ACoC (All Combinations Coverage) y lo vamos a comparar con el BCC (Base Choice Coverage).
	- ACoC:
		Tenemos un total de 16 posibles combinaciones de pruebas (ya que tenemos cuatro diferentes tests que pueden tener dos valores posibles cada uno).

	- BCC:
		Base: Happy path con valores legales y numero de botellas suficiente.
			FFF TTT TF TF

		Requisitos no posibles:
			T** T** ** **
			*T* *T* ** **
			**T **T ** **

			*** *** TT **
			*** *** ** TT

			Entrada nula
			TTT FFF FF FF
			TFF FTT TF FF
			FTF TFT FF TF
			FFT TTF FF TF

			Entrada negativa
			FFF FTT TF TF
			FFF TFT TF TF
			FFF TTF TF TF
			FFF FFF TF TF

			TFF FTT TF FF
			TFF FTT FT FF

			FFF TTT TF FF
			FFF TTT TF FT
			FFF TTT TF TF

			TFF FTT FT FF
			FFF TTT FT FT
			FFF TTT FT TF

			FFF TTT FF FF
			FFF TTT FF FT
			FFF TTT FF TF



*******************************
*** 4. DescuentoBlackFriday ***
*******************************

1.

2. Parámetros:
	[double precioOriginal, date fecha]

3. Caracterización:
	C1: Precio nulo
	C2: Precio positivo
	C3: Fecha = 23 Noviembre

4. Requisitos:


